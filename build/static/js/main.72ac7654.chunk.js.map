{"version":3,"sources":["registerServiceWorker.js","utils/history.js","components/Home.js","RootComponent.js","reducers/IsSidePanelCollapsed.js","index.js","reducers/index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","createHistory","Home","react_default","a","createElement","className","Component","RootComponent","_ref","store","es","Router","history","Switch","Route","path","component","Redirect","to","displayName","IsSidePanelCollapsed","arguments","length","undefined","type","createStore","combineReducers","isSidePanelCollapsed","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","src_RootComponent","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yNAUMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,yDC7ElDC,qDCaAC,0LAVX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAAlB,uBAJWC,cCMbC,EAAgB,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,MAAF,OAClBP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAUD,MAAOA,GACbP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAQC,QAASA,GACbV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACIX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,KAThB,QASkCC,UAAWf,IACpCC,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAUC,GAVnB,iBAmBnBX,EAAcY,YAAc,gBAMbZ,+BC9BAa,EAAA,WAA0B,IAAzB1B,IAAyB2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACrC,QADqCA,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACtBC,MACX,IAJyB,oBAKrB,OAAQ9B,EACZ,QACI,OAAOA,ICGbe,EAAQgB,sBCROC,0BAAgB,CACjCC,yBDOkCC,8BAAoBC,0BAAgBC,OAE1EC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAexB,MAAOA,IAAWyB,SAASC,eAAe,SLQ1D,WACb,GAA6C,kBAAmBlD,UAAW,CAGzE,GADkB,IAAImD,IAAIC,GAAwB1D,OAAOC,UAC3C0D,SAAW3D,OAAOC,SAAS0D,OAIvC,OAGF3D,OAAO4D,iBAAiB,OAAQ,WAC9B,IAAMvD,EAAK,GAAAwD,OAAMH,GAAN,sBAEP5D,GAiDV,SAAiCO,GAE/ByD,MAAMzD,GACHI,KAAK,SAAAsD,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7D,UAAUC,cAAc6D,MAAM3D,KAAK,SAAAC,GACjCA,EAAa2D,aAAa5D,KAAK,WAC7BT,OAAOC,SAASqE,aAKpBlE,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAqD,CAAwBlE,GAIxBC,UAAUC,cAAc6D,MAAM3D,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MKnCxBmE","file":"static/js/main.72ac7654.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import createHistory from 'history/createBrowserHistory'\n\nexport default createHistory()\n","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          hello world\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Provider} from 'react-redux';\nimport {Redirect, Route, Router, Switch} from 'react-router-dom'\nimport history from './utils/history';\nimport Home from './components/Home';\n\nconst ROUTE_HOME = \"/home\";\n\nconst RootComponent = ({store}) => (\n    <div>\n        <Provider store={store}>\n            <div className=\"app\">\n                <div className=\"container\">\n                    <Router history={history}>\n                        <Switch>\n                            <Route path={ROUTE_HOME} component={Home}/>\n                            <Redirect to={ROUTE_HOME} />\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n        </Provider>\n    </div>\n);\n\nRootComponent.displayName = 'RootComponent';\n\nRootComponent.propTypes = {\n    store: PropTypes.object.isRequired\n};\n\nexport default RootComponent;\n","export const TOGGLE_SIDE_PANEL = \"TOGGLE_SIDE_PANEL\";\n\nexport default (state = true, action) => {\n    switch (action.type) {\n        case TOGGLE_SIDE_PANEL:\n            return !state;\n        default:\n            return state;\n    }\n}\n","import './index.css';\nimport React                            from 'react';\nimport ReactDOM                         from 'react-dom';\nimport registerServiceWorker            from './registerServiceWorker';\nimport RootComponent                    from \"./RootComponent\";\nimport {composeWithDevTools}            from 'redux-devtools-extension/developmentOnly';\nimport {applyMiddleware, createStore}   from 'redux';\nimport thunk                            from 'redux-thunk';\nimport reducers                         from './reducers';\n\nconst store = createStore(reducers(), composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(<RootComponent store={store} />, document.getElementById('root'));\nregisterServiceWorker();\n","import {combineReducers}        from 'redux';\nimport isSidePanelCollapsed     from './IsSidePanelCollapsed';\nexport default () => combineReducers({\n    isSidePanelCollapsed\n});\n"],"sourceRoot":""}